/**
 * QVCT Manager - Script Principal v29 (Correction Syntaxe + Budget Tâches)
 *
 * Intégration complète du script, incluant la correction de syntaxe
 * et la logique de budget basée sur les tâches.
 */
'use strict';

document.addEventListener('DOMContentLoaded', () => {

    // #region Vérification Dépendances et Initialisation Firebase
    try {
        if (typeof firebase === 'undefined' || !firebase.firestore || !firebase.auth) throw new Error("SDK Firebase (firestore, auth) non chargé ou incomplet.");
        if (typeof firebaseConfig === 'undefined') throw new Error("firebaseConfig non défini.");
        if (typeof Chart === 'undefined') throw new Error("Chart.js non chargé.");
        if (typeof FullCalendar === 'undefined' || !FullCalendar.Calendar) throw new Error("FullCalendar non chargé ou incomplet.");
        console.log("Vérifications initiales des dépendances OK.");
    } catch (err) {
        console.error("ERREUR CRITIQUE INIT:", err);
        document.body.innerHTML = `<div style="padding: 40px; text-align: center;"><h1 style="color: red;">Erreur Critique</h1><p>Impossible de charger l'application : ${err.message}. Vérifiez l'inclusion des bibliothèques et la console.</p></div>`;
        return;
    }
    let db; let auth; try { if (!firebase.apps.length) { firebase.initializeApp(firebaseConfig); console.log("Firebase Initialized"); } else { firebase.app(); console.log("Firebase App already exists"); } db = firebase.firestore(); auth = firebase.auth(); console.log("Firestore & Auth Ready"); } catch (initError) { console.error("Erreur Init Firebase:", initError); document.body.innerHTML = `<div style="padding: 40px; text-align: center;"><h1 style="color: red;">Erreur Initialisation Firebase</h1><p>Impossible d'initialiser Firebase.</p></div>`; return; }
    const membersCollection = db.collection('members'); const animationsCollection = db.collection('animations'); const tasksCollection = db.collection('tasks'); const authorizedUsersCollection = db.collection('authorizedUsers');
    const documentsCollection = db.collection('documents'); // Ajout référence
    // #endregion

    // #region Références aux Éléments DOM
    const navLinks = document.querySelectorAll('.nav-link'); const pages = document.querySelectorAll('.page'); const allCloseBtns = document.querySelectorAll('.modal .close-btn'); const allModals = document.querySelectorAll('.modal'); const addMemberBtn = document.getElementById('add-member-btn'); const memberModal = document.getElementById('member-form-modal'); const memberForm = document.getElementById('member-form'); const memberListDiv = document.getElementById('member-list'); const memberFormTitle = document.getElementById('member-form-title'); const hiddenMemberIdInput = document.getElementById('member-id'); const addAnimationBtn = document.getElementById('add-animation-btn'); const animationModal = document.getElementById('animation-form-modal'); const animationForm = document.getElementById('animation-form'); const animationListDiv = document.getElementById('animation-list'); const animationFormTitle = document.getElementById('animation-form-title'); const animationParticipantsDiv = document.getElementById('animation-participants-list'); const hiddenAnimationIdInput = document.getElementById('animation-id'); const animationStatusFilterSelect = document.getElementById('animation-status-filter'); const animationTypeSelect = document.getElementById('animation-type'); const animationViewFilterSelect = document.getElementById('animation-view-filter'); const animationDetailModal = document.getElementById('animation-detail-modal'); const animationDetailContent = document.getElementById('animation-detail-content'); const detailModalTitle = document.getElementById('detail-modal-title'); const editFromDetailBtn = document.getElementById('edit-from-detail-btn'); const addTaskBtn = document.getElementById('add-task-btn'); const taskModal = document.getElementById('task-form-modal'); const taskForm = document.getElementById('task-form'); const taskListDiv = document.getElementById('task-list'); const taskFormTitle = document.getElementById('task-form-title'); const taskFilterAnimationSelect = document.getElementById('task-filter-animation'); const taskAnimationSelect = document.getElementById('task-animation'); const taskAssigneesDiv = document.getElementById('task-assignees-list'); const hiddenTaskIdInput = document.getElementById('task-id'); const taskListModal = document.getElementById('task-list-modal'); const modalTaskTitle = document.getElementById('modal-task-title'); const modalTaskContent = document.getElementById('modal-task-content'); const upcomingCountEl = document.getElementById('upcoming-animations-count'); const upcomingListEl = document.getElementById('upcoming-animations-list'); const ongoingCountEl = document.getElementById('ongoing-tasks-count'); const ongoingListEl = document.getElementById('ongoing-tasks-list'); const deadlinesListEl = document.getElementById('deadlines-list'); const plannedBudgetTotalEl = document.getElementById('planned-budget-total'); const budgetDetailsInfoEl = document.getElementById('budget-details-info'); const overdueTasksBadgeEl = document.getElementById('overdue-tasks-badge'); const remainingAnnualBudgetEl = document.getElementById('remaining-annual-budget'); const remainingBudgetDetailsEl = document.getElementById('remaining-budget-details'); const budgetChartErrorEl = document.getElementById('dashboard-budget-error'); const calendarContainerEl = document.getElementById('dashboard-calendar'); const calendarMessageEl = document.querySelector('#dashboard-calendar-wrapper .calendar-loading-message'); const statsTotalCompletedEl = document.getElementById('stats-total-completed'); const statsAvgParticipationEl = document.getElementById('stats-avg-participation'); const statsTotalBudgetSpentEl = document.getElementById('stats-total-budget-spent'); const statusErrorEl = document.getElementById('stats-status-error'); const typeErrorEl = document.getElementById('stats-type-error'); const participationErrorEl = document.getElementById('stats-participation-error'); const exportCsvBtn = document.getElementById('export-csv-btn'); const loginBtn = document.getElementById('login-btn'); const logoutBtn = document.getElementById('logout-btn'); const userInfoDiv = document.getElementById('user-info'); const userNameSpan = document.getElementById('user-name'); const userPhotoImg = document.getElementById('user-photo');
    // #endregion

    // #region Variables d'État, Cache et Instances
    let editingMemberId = null; let editingAnimationId = null; let editingTaskId = null; let currentUser = null; let currentDetailAnimationId = null; let cachedMembers = []; let membersLoaded = false; let cachedAnimations = []; let animationsLoaded = false; let cachedTasks = []; let tasksLoaded = false; let cachedDocuments = []; let documentsLoaded = false; let isInitialLoadComplete = false; let initialLoadPromise = null; let resolveInitialLoad; const resetInitialLoadPromise = () => { initialLoadPromise = new Promise(resolve => { resolveInitialLoad = resolve; }); isInitialLoadComplete = false; }; resetInitialLoadPromise(); let statusChartInstance = null; let typeChartInstance = null; let participationChartInstance = null; let dashboardBudgetChartInstance = null; let dashboardCalendarInstance = null;
    // #endregion

    // #region Fonctions Utilitaires
    const openModal = (modal) => { if (modal) modal.style.display = 'block'; };
    const closeModal = (modal) => { if (!modal) return; modal.style.display = 'none'; if (modal === memberModal && memberForm) { memberForm.reset(); editingMemberId = null; if (memberFormTitle) memberFormTitle.textContent = "Ajouter Membre"; if (hiddenMemberIdInput) hiddenMemberIdInput.value = ''; } else if (modal === animationModal && animationForm) { animationForm.reset(); editingAnimationId = null; if (animationFormTitle) animationFormTitle.textContent = "Ajouter Animation"; if (hiddenAnimationIdInput) hiddenAnimationIdInput.value = ''; if (animationParticipantsDiv) animationParticipantsDiv.innerHTML = '<p>Chargement...</p>'; } else if (modal === taskModal && taskForm) { taskForm.reset(); editingTaskId = null; if (taskFormTitle) taskFormTitle.textContent = "Ajouter Tâche"; if (hiddenTaskIdInput) hiddenTaskIdInput.value = ''; if (taskAnimationSelect) taskAnimationSelect.value = ""; if (taskAssigneesDiv) taskAssigneesDiv.innerHTML = '<p>Chargement...</p>'; const budgetInput = document.getElementById('task-budget'); if(budgetInput) budgetInput.value = ''; } else if (modal === taskListModal) { if (modalTaskTitle) modalTaskTitle.textContent = "Tâches"; if (modalTaskContent) modalTaskContent.innerHTML = '<p>Chargement...</p>'; } else if (modal === animationDetailModal) { if (animationDetailContent) animationDetailContent.innerHTML = '<p>Chargement...</p>'; if (detailModalTitle) detailModalTitle.textContent = "Détail de l'Animation"; currentDetailAnimationId = null; } };
    const escapeCsvValue = (value) => { const stringValue = String(value ?? ''); if (/[";\n]/.test(stringValue)) { return `"${stringValue.replace(/"/g, '""')}"`; } return stringValue; };
    const animateCardEntry = (cardElement, delay) => { if (!cardElement) return; requestAnimationFrame(() => { requestAnimationFrame(() => { cardElement.style.transitionDelay = `${delay}ms`; cardElement.classList.remove('card-hidden'); cardElement.addEventListener('transitionend', () => { cardElement.style.transitionDelay = ''; }, { once: true }); }); }); };
    const getDateValueInMillis = (dateFieldValue) => { if (!dateFieldValue) return Infinity; if (typeof dateFieldValue.toDate === 'function') { try { const d = dateFieldValue.toDate(); return (d instanceof Date && !isNaN(d.getTime())) ? d.getTime() : Infinity; } catch (e) { return Infinity; } } try { const d = new Date(dateFieldValue); return (d instanceof Date && !isNaN(d.getTime())) ? d.getTime() : Infinity; } catch (e) { return Infinity; } };
    const calculateAnimationBudget = (animationId) => { if (!tasksLoaded || !animationId) return 0; let totalBudget = 0; cachedTasks.filter(task => task.animationId === animationId).forEach(task => { if (typeof task.budget === 'number' && !isNaN(task.budget) && task.budget > 0) { totalBudget += task.budget; } }); return totalBudget; };
    function getDocumentThumbnailInfo(docUrl, docType) { let thumbnailUrl = null; let isDirectImageLink = false; const imageTypes = ['affiche']; const isImageType = imageTypes.includes(docType); let placeholderIcon = 'fa-file'; if (isImageType && docUrl) { try { const urlObj = new URL(docUrl); if (urlObj.hostname === 'i.imgur.com') { const parts = docUrl.split('.'); if (parts.length > 1) { const ext = parts.pop(); const base = parts.join('.'); thumbnailUrl = base.endsWith('s') ? docUrl : `${base}s.${ext}`; isDirectImageLink = true; } } else if (/\.(jpg|jpeg|png|gif|webp|avif)$/i.test(docUrl)) { thumbnailUrl = docUrl; isDirectImageLink = true; } } catch (e) {} } if (!thumbnailUrl) { if (docType === 'facture') placeholderIcon = 'fa-file-invoice-dollar'; else if (docType === 'affiche') placeholderIcon = 'fa-file-image'; else if (docType === 'compte-rendu') placeholderIcon = 'fa-file-lines'; else placeholderIcon = 'fa-file-alt'; } return { thumbnailUrl, isDirectImageLink, placeholderIcon }; }
    // #endregion

    // #region Logique de Navigation
    const navigateTo = (pageId, updateHistory = true) => { pages.forEach(p => p.classList.remove('active')); const targetPage = document.getElementById(pageId); if (targetPage) { targetPage.classList.add('active'); } else { console.warn(`Page ID "${pageId}" introuvable. Affichage Dashboard.`); document.getElementById('dashboard')?.classList.add('active'); pageId = 'dashboard'; } navLinks.forEach(l => l.classList.remove('active')); const activeLink = document.querySelector(`.nav-link[href="#${pageId}"]`); if (activeLink) { activeLink.classList.add('active'); } else { document.querySelector(`.nav-link[href="#dashboard"]`)?.classList.add('active'); } if (updateHistory && window.location.hash !== `#${pageId}`) { window.location.hash = pageId; } console.log(`Navigation vers: ${pageId}`); ensureCacheAndRender(pageId); };
    const ensureCacheAndRender = async (pageId) => { if (!currentUser && pageId !== 'dashboard') { console.log(`Render annulé pour ${pageId} (utilisateur déconnecté)`); const targetPage = document.getElementById(pageId); if (targetPage) targetPage.innerHTML = '<p style="text-align:center; margin-top: 30px; color: var(--danger-color);">Veuillez vous connecter pour accéder à cette section.</p>'; return; } if (currentUser) { try { console.log(`Vérification chargement initial pour ${pageId}...`); await initialLoadPromise; console.log(`Chargement initial terminé pour ${pageId}.`); if (!isInitialLoadComplete && pageId !== 'dashboard') { console.error("ERREUR LOGIQUE: Promesse résolue mais isInitialLoadComplete est false!"); throw new Error("Incohérence état chargement initial."); } } catch (waitError) { console.error(`Erreur pendant l'attente de initialLoadPromise pour ${pageId}:`, waitError); const targetPage = document.getElementById(pageId); if (targetPage) targetPage.innerHTML = `<p class="error-message" style="text-align:center; margin-top: 30px; color: var(--danger-color);">Erreur lors de la préparation de l'affichage (${waitError.message}).</p>`; return; } } console.log(`Lancement rendu pour page: ${pageId}`); try { switch (pageId) { case 'members': await loadMembersIntoCache(); renderMembers(); break; case 'animations': await Promise.all([loadAnimationsIntoCache(), loadTasksIntoCache(), loadDocumentsIntoCache()]); renderAnimations(); break; case 'tasks': await Promise.all([loadMembersIntoCache(), loadAnimationsIntoCache(), loadTasksIntoCache()]); populateTaskFilterDropdown(); renderTasks(); break; case 'dashboard': await Promise.all([loadMembersIntoCache(), loadAnimationsIntoCache(), loadTasksIntoCache()]); renderDashboard(); break; case 'stats': await Promise.all([loadMembersIntoCache(), loadAnimationsIntoCache(), loadTasksIntoCache()]); renderStats(); break; case 'documents': if (typeof initDocumentsPage === 'function') { await Promise.all([loadAnimationsIntoCache(), loadTasksIntoCache(), loadDocumentsIntoCache()]); initDocumentsPage( db, currentUser, async () => { await loadTasksIntoCache(); return cachedTasks; }, async () => { await loadAnimationsIntoCache(); return cachedAnimations; }, openModal, closeModal, animateCardEntry ); } else { console.error("La fonction initDocumentsPage n'est pas définie..."); const docPage = document.getElementById('documents'); if (docPage) docPage.innerHTML = '<p class="error-message">Erreur chargement module documents.</p>'; } break; default: console.log(`Pas de rendu spécifique pour ${pageId}.`); break; } } catch (error) { console.error(`Erreur lors du rendu pour la page ${pageId}:`, error); const targetPage = document.getElementById(pageId); if (targetPage) targetPage.innerHTML = `<p class="error-message" style="text-align:center; margin-top: 30px; color: var(--danger-color);">Erreur lors du chargement de cette section (${error.message}).</p>`; } };
    // #endregion

    // #region Gestion du Cache
    const loadMembersIntoCache = async (forceReload = false) => { if (!currentUser) { console.warn("Chargement membres annulé (déconnecté)"); cachedMembers = []; membersLoaded = false; return; } if (membersLoaded && !forceReload) return; try { console.log("Firestore: Chargement Membres..."); const snapshot = await membersCollection.orderBy("lastname", "asc").get(); cachedMembers = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); membersLoaded = true; console.log("Cache Membres OK:", cachedMembers.length); } catch (error) { console.error("Erreur chargement cache membres:", error); membersLoaded = false; cachedMembers = []; throw error; } };
    const loadAnimationsIntoCache = async (forceReload = false) => { if (!currentUser) { console.warn("Chargement animations annulé (déconnecté)"); cachedAnimations = []; animationsLoaded = false; return; } if (animationsLoaded && !forceReload) return; try { console.log("Firestore: Chargement Animations..."); const snapshot = await animationsCollection.orderBy("dateTime", "desc").get(); cachedAnimations = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); animationsLoaded = true; console.log("Cache Animations OK:", cachedAnimations.length); } catch (error) { console.error("Erreur chargement cache animations:", error); animationsLoaded = false; cachedAnimations = []; throw error; } };
    const loadTasksIntoCache = async (forceReload = false) => { if (!currentUser) { console.warn("Chargement tâches annulé (déconnecté)"); cachedTasks = []; tasksLoaded = false; return; } if (tasksLoaded && !forceReload) return; try { console.log("Firestore: Chargement Tâches..."); const snapshot = await tasksCollection.get(); cachedTasks = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); tasksLoaded = true; console.log("Cache Tâches OK:", cachedTasks.length); } catch (error) { console.error("Erreur chargement cache tâches:", error); tasksLoaded = false; cachedTasks = []; throw error; } };
    const loadDocumentsIntoCache = async (forceReload = false) => { if (!currentUser) { console.warn("Chargement documents annulé (déconnecté)"); cachedDocuments = []; documentsLoaded = false; return; } if (documentsLoaded && !forceReload) return; try { console.log("Firestore: Chargement Documents..."); const snapshot = await documentsCollection.orderBy("uploadDate", "desc").get(); cachedDocuments = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); documentsLoaded = true; console.log("Cache Documents OK:", cachedDocuments.length); } catch (error) { console.error("Erreur chargement cache documents:", error); documentsLoaded = false; cachedDocuments = []; throw error; } };
    const loadAllCaches = async (forceReload = false) => { if (!currentUser) { console.log("Chargement global annulé (déco)"); isInitialLoadComplete = false; return; } console.log("Chargement de tous les caches..."); try { await Promise.all([ loadMembersIntoCache(forceReload), loadAnimationsIntoCache(forceReload), loadTasksIntoCache(forceReload), loadDocumentsIntoCache(forceReload) ]); isInitialLoadComplete = true; console.log("Chargement global OK."); } catch (error) { console.error("Erreur critique chargement global:", error); isInitialLoadComplete = false; throw error; } };
    const clearAllCaches = () => { cachedMembers = []; membersLoaded = false; cachedAnimations = []; animationsLoaded = false; cachedTasks = []; tasksLoaded = false; cachedDocuments = []; documentsLoaded = false; isInitialLoadComplete = false; console.log("Caches vidés."); };
    // #endregion

    // #region Fonctions pour Dropdowns et Checkboxes
    const populateMemberOptions = (selectEl, selectedId = '') => { if (!selectEl) return; const currentVal = selectEl.value; selectEl.innerHTML = '<option value="">-- Choisir --</option>'; if (membersLoaded && cachedMembers.length > 0) { cachedMembers.forEach(m => { const opt = document.createElement('option'); opt.value = m.id; opt.textContent = `${m.firstname} ${m.lastname}`; selectEl.appendChild(opt); }); selectEl.value = selectedId || (cachedMembers.some(m => m.id === currentVal) ? currentVal : ""); } else { console.warn("Impossible de peupler les membres (cache vide ou non chargé)."); } };
    const populateAnimationOptions = (selectEl, selectedId = '', addAllOption = false) => { if (!selectEl) return; const currentVal = selectEl.value; selectEl.innerHTML = ''; if (addAllOption) { const allOpt = document.createElement('option'); allOpt.value = 'all'; allOpt.textContent = 'Toutes les animations'; selectEl.appendChild(allOpt); } else { selectEl.innerHTML = '<option value="">-- Choisir une animation --</option>'; } if (animationsLoaded && cachedAnimations.length > 0) { const sortedAnimations = [...cachedAnimations].sort((a, b) => (a.title || '').localeCompare(b.title || '')); sortedAnimations.forEach(a => { const opt = document.createElement('option'); opt.value = a.id; opt.textContent = a.title || 'Animation sans titre'; selectEl.appendChild(opt); }); if (selectedId) { selectEl.value = selectedId; } else if (addAllOption) { selectEl.value = currentVal === 'all' ? 'all' : 'all'; } else { selectEl.value = cachedAnimations.some(a => a.id === currentVal) ? currentVal : ""; } } else { console.warn("Impossible de peupler les animations (cache vide ou non chargé)."); } };
    const populateTaskFilterDropdown = () => { if (!taskFilterAnimationSelect) { console.warn("Élément #task-filter-animation non trouvé."); return; } populateAnimationOptions(taskFilterAnimationSelect, taskFilterAnimationSelect.value || 'all', true); };
    const renderMemberCheckboxesForTask = async (selectedIds = []) => { if (!taskAssigneesDiv) { console.error("DOM Error: #task-assignees-list not found"); return; } taskAssigneesDiv.innerHTML = '<p>Chargement des membres...</p>'; try { await loadMembersIntoCache(); if (!membersLoaded || cachedMembers.length === 0) { taskAssigneesDiv.innerHTML = '<p>Aucun membre disponible.</p>'; return; } taskAssigneesDiv.innerHTML = ''; cachedMembers.forEach(member => { const isChecked = selectedIds.includes(member.id); const label = document.createElement('label'); label.innerHTML = `<input type="checkbox" name="taskAssignees" value="${member.id}" ${isChecked ? 'checked' : ''}> `; label.appendChild(document.createTextNode(`${member.firstname} ${member.lastname}`)); taskAssigneesDiv.appendChild(label); }); } catch (error) { console.error("Erreur rendu checkboxes tâche:", error); taskAssigneesDiv.innerHTML = '<p style="color:red">Erreur lors du chargement des membres.</p>'; } };
    const renderMemberCheckboxes = async (selectedIds = []) => { if (!animationParticipantsDiv) { console.error("DOM Error: #animation-participants-list not found"); return; } animationParticipantsDiv.innerHTML = '<p>Chargement des membres...</p>'; try { await loadMembersIntoCache(); if (!membersLoaded || cachedMembers.length === 0) { animationParticipantsDiv.innerHTML = '<p>Aucun membre disponible.</p>'; return; } animationParticipantsDiv.innerHTML = ''; cachedMembers.forEach(member => { const isChecked = selectedIds.includes(member.id); const label = document.createElement('label'); label.innerHTML = `<input type="checkbox" name="participants" value="${member.id}" ${isChecked ? 'checked' : ''}> `; label.appendChild(document.createTextNode(`${member.firstname} ${member.lastname}`)); animationParticipantsDiv.appendChild(label); }); } catch (error) { console.error("Erreur rendu checkboxes animation:", error); animationParticipantsDiv.innerHTML = '<p style="color:red">Erreur chargement membres.</p>'; } };
    // #endregion

    // #region Fonctions de Rendu (Affichage)
    const renderMembers = async () => { if (!memberListDiv) { console.error("DOM Error: #member-list not found"); return; } if (!currentUser) { memberListDiv.innerHTML = '<p>Veuillez vous connecter pour voir les membres.</p>'; return; } memberListDiv.innerHTML = '<p>Chargement des membres...</p>'; try { if (!membersLoaded) await loadMembersIntoCache(); if (!membersLoaded || cachedMembers.length === 0) { memberListDiv.innerHTML = '<p>Aucun membre COPIL ajouté pour le moment.</p>'; return; } memberListDiv.innerHTML = ''; cachedMembers.forEach((member, index) => { const memberId = member.id; const div = document.createElement('div'); div.className = 'member-card card-hidden'; div.setAttribute('data-id', memberId); div.innerHTML = ` <div class="card-body"> <h3 class="member-name">${member.firstname || ''} ${member.lastname || ''}</h3> <p class="member-detail"> <i class="fas fa-user-tag"></i> <span>Rôle: ${member.role || 'N/A'}</span> </p> <p class="member-detail"> <i class="fas fa-envelope"></i> <span>Contact: ${member.contact || 'N/A'}</span> </p> </div> <div class="card-footer"> <button class="btn secondary-btn edit-btn" title="Modifier"><i class="fas fa-edit"></i></button> <button class="btn danger-btn delete-btn" title="Supprimer"><i class="fas fa-trash"></i></button> </div>`; memberListDiv.appendChild(div); animateCardEntry(div, index * 50); const editBtn = div.querySelector('.edit-btn'); if (editBtn) editBtn.addEventListener('click', () => handleEditMember(memberId)); const deleteBtn = div.querySelector('.delete-btn'); if (deleteBtn) deleteBtn.addEventListener('click', () => handleDeleteMember(memberId)); }); } catch (error) { console.error("Erreur rendu membres:", error); memberListDiv.innerHTML = '<p class="error-message">Erreur lors du chargement des membres.</p>'; } };
    const renderAnimations = async () => { if (!animationListDiv) { console.error("DOM Error: #animation-list non trouvé"); return; } if (!currentUser) { animationListDiv.innerHTML = '<p>Veuillez vous connecter pour voir les animations.</p>'; return; } animationListDiv.innerHTML = '<p>Chargement des animations...</p>'; const selectedView = animationViewFilterSelect?.value || 'all'; const selectedStatus = animationStatusFilterSelect?.value || 'all'; console.log(`--- Début renderAnimations (avec miniature) ---`); console.log(`Filtres Demandés: Vue='${selectedView}', Statut='${selectedStatus}'`); try { if (!animationsLoaded || !tasksLoaded || !documentsLoaded) { await Promise.all([ loadAnimationsIntoCache(true), loadTasksIntoCache(true), loadDocumentsIntoCache(true) ]); if (!animationsLoaded || !tasksLoaded || !documentsLoaded) throw new Error("Données cache manquantes pour rendu animations."); } console.log(`Cache Initial Anim (${cachedAnimations.length}), Tâches (${cachedTasks.length}), Docs (${cachedDocuments.length})`); let filteredList = [...cachedAnimations]; if (selectedView === 'active') { filteredList = filteredList.filter(a => a.status === 'prévue' || a.status === 'en cours'); } else if (selectedView === 'archived') { filteredList = filteredList.filter(a => a.status === 'réalisée' || a.status === 'annulée'); } if (selectedStatus !== 'all') { filteredList = filteredList.filter(a => a.status === selectedStatus); } const animationsToRender = filteredList; animationsToRender.sort((a, b) => getDateValueInMillis(b.dateTime) - getDateValueInMillis(a.dateTime)); if (animationsToRender.length === 0) { let message = "Aucune animation trouvée"; if (selectedView !== 'all' || selectedStatus !== 'all') { message += ` correspondant aux filtres.`; } else { message += "."; } animationListDiv.innerHTML = `<p>${message}</p>`; } else { animationListDiv.innerHTML = ''; animationsToRender.forEach((animation, index) => { const animationId = animation.id; const div = document.createElement('div'); const statusClass = (animation.status || 'prévue').replace(/\s+/g, '-').toLowerCase(); div.className = `animation-card status-${statusClass} card-hidden`; div.setAttribute('data-id', animationId); const relatedPoster = cachedDocuments.find(doc => doc.linkedToId === animationId && doc.type === 'affiche'); let thumbnailHtml = ''; if (relatedPoster) { const thumbInfo = getDocumentThumbnailInfo(relatedPoster.url, relatedPoster.type); const placeholderOnError = "this.onerror=null; this.parentElement.innerHTML = `<i class='fas fa-image fa-3x text-muted' title='Erreur chargement image'></i>`;"; thumbnailHtml = `<div class="anim-thumbnail">${thumbInfo.thumbnailUrl ? `<img src="${thumbInfo.thumbnailUrl}" alt="Affiche" loading="lazy" onerror="${placeholderOnError}">` : `<i class="fas ${thumbInfo.placeholderIcon} fa-3x"></i>`}</div>`; } let dateStr = 'N/A', timeStr = ''; try { if (animation.dateTime?.toDate) { const d = animation.dateTime.toDate(); if (d instanceof Date && !isNaN(d)) { dateStr = d.toLocaleDateString('fr-FR', { day: '2-digit', month: 'short', year: 'numeric' }); timeStr = d.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }); } } } catch (e) { dateStr = 'Err'; } const animType = animation.animationType || 'N/D'; const location = animation.location || 'N/A'; const statusText = animation.status || 'N/A'; const docsCount = (Array.isArray(animation.documentLinks) ? animation.documentLinks : []).length; const participantsCount = (Array.isArray(animation.participantIds) ? animation.participantIds : []).length; const participantText = `${participantsCount} Part${participantsCount !== 1 ? 's.' : '.'}`; const docText = `${docsCount} Doc${docsCount !== 1 ? 's.' : '.'}`; const description = animation.description || ''; const calculatedBudget = calculateAnimationBudget(animationId); const budgetDisplay = calculatedBudget > 0 ? `${calculatedBudget.toLocaleString('fr-FR')} €` : 'N/D'; div.innerHTML = `<div class="card-header"><h3>${animation.title || 'Animation sans titre'}</h3></div> <div class="card-body anim-card-body">${thumbnailHtml}<div class="anim-info"><div class="card-details-row compact"><span class="detail-item date"><i class="fas fa-calendar-day"></i> ${dateStr} ${timeStr ? ' - ' + timeStr : ''}</span><span class="detail-item type"><i class="fas fa-tags"></i> ${animType}</span><span class="detail-item location" title="${location}"><i class="fas fa-map-marker-alt"></i> ${location}</span></div><div class="card-details-row secondary"><span class="detail-item status"><i class="fas fa-info-circle"></i> ${statusText}</span><span class="detail-item budget"><i class="fas fa-euro-sign"></i> ${budgetDisplay}</span><span class="detail-item participants"><i class="fas fa-users"></i> ${participantText}</span><span class="detail-item docs"><i class="fas fa-paperclip"></i> ${docText}</span></div> ${description ? `<p class="card-description" title="${description}">${description}</p>` : '<p class="card-description no-description"><i>Aucune description.</i></p>'}</div></div> <div class="card-footer"><button class="btn secondary-btn show-tasks-btn" title="Voir tâches"><i class="fas fa-list-check"></i></button><button class="btn secondary-btn edit-btn" title="Modifier"><i class="fas fa-edit"></i></button><button class="btn danger-btn delete-btn" title="Supprimer"><i class="fas fa-trash"></i></button></div>`; animationListDiv.appendChild(div); if (typeof _animateCardEntry === 'function') _animateCardEntry(div, index * 50); else div.classList.remove('card-hidden'); const showTasksBtn = div.querySelector('.show-tasks-btn'); if (showTasksBtn) showTasksBtn.addEventListener('click', () => handleShowAnimationTasks(animationId, animation.title)); const editBtn = div.querySelector('.edit-btn'); if (editBtn) editBtn.addEventListener('click', () => handleEditAnimation(animationId)); const deleteBtn = div.querySelector('.delete-btn'); if (deleteBtn) deleteBtn.addEventListener('click', () => handleDeleteAnimation(animationId)); }); } } catch (error) { console.error("Erreur globale dans renderAnimations:", error); animationListDiv.innerHTML = `<p class="error-message">Erreur affichage animations: ${error.message}</p>`; } console.log(`--- Fin renderAnimations ---`); };
    const renderTasks = async () => { if (!taskListDiv) { console.error("DOM Error: #task-list not found"); return; } if (!currentUser) { taskListDiv.innerHTML = '<p>Veuillez vous connecter pour voir les tâches.</p>'; return; } taskListDiv.innerHTML = '<p>Chargement des tâches...</p>'; if (!membersLoaded || !animationsLoaded || !tasksLoaded) { console.warn("renderTasks: Données cache non prêtes."); taskListDiv.innerHTML = '<p class="error-message">Erreur chargement données.</p>'; return; } const selectedAnimId = taskFilterAnimationSelect?.value || 'all'; try { let filteredTasks = cachedTasks; if (selectedAnimId !== 'all') { filteredTasks = cachedTasks.filter(t => t.animationId === selectedAnimId); } filteredTasks.sort((a, b) => getDateValueInMillis(a.dueDate) - getDateValueInMillis(b.dueDate)); if (filteredTasks.length === 0) { taskListDiv.innerHTML = `<p>Aucune tâche trouvée ${selectedAnimId !== 'all' ? 'pour cette animation': ''}.</p>`; return; } taskListDiv.innerHTML = ''; filteredTasks.forEach((task, index) => { const taskId = task.id; const animation = cachedAnimations.find(a => a.id === task.animationId); const div = document.createElement('div'); const statusClass = (task.status || 'à faire').replace(/\s+/g, '-').toLowerCase(); div.className = `task-card status-${statusClass} card-hidden`; div.setAttribute('data-id', taskId); let dateStr = 'N/A', overdueHtml = ''; try { const dueDateMs = getDateValueInMillis(task.dueDate); if (dueDateMs !== Infinity) { const d = new Date(dueDateMs); dateStr = d.toLocaleDateString('fr-FR', { year:'numeric', month:'short', day:'numeric'}); if (task.status !== 'terminé' && d.getTime() < Date.now() - 864e5) overdueHtml = ' <span style="color: var(--danger-color); font-weight: bold;">(Retard)</span>'; } } catch (e) { dateStr = 'Err'; } const assigneeIds = Array.isArray(task.assigneeIds) ? task.assigneeIds : []; let assigneesText = 'N/A'; if (assigneeIds.length > 0 && membersLoaded) { assigneesText = assigneeIds.map(id => { const m = cachedMembers.find(m => m.id === id); return m ? `${m.firstname.charAt(0)}. ${m.lastname}` : '?'; }).join(', '); } else if (assigneeIds.length > 0) { assigneesText = `${assigneeIds.length} assigné(s)`; } const animationTitle = animation ? (animation.title || 'Anim. liée') : 'Anim. N/A'; const taskBudget = (task.budget != null && !isNaN(task.budget)) ? `${Number(task.budget).toLocaleString('fr-FR')} €` : ''; const budgetHtml = taskBudget ? `<div class="card-detail"><i class="fas fa-euro-sign" style="color: var(--warning-color);"></i><span>${taskBudget}</span></div>` : ''; div.innerHTML = `<div class="card-body"> <p class="task-description">${task.description || 'N/A'}</p> <div class="card-detail" title="Liée à: ${animationTitle}"><i class="fas fa-link"></i><span>${animationTitle}</span></div> <div class="card-detail" title="Assigné(s): ${assigneesText}"><i class="fas fa-users"></i><span>${assigneesText}</span></div> <div class="card-detail"><i class="fas fa-clock"></i><span>Éch: ${dateStr}${overdueHtml}</span></div> <div class="card-detail"><i class="fas fa-info-circle"></i><span>${task.status || 'N/A'}</span></div> ${budgetHtml} </div> <div class="card-footer"> <button class="btn secondary-btn edit-btn" title="Modifier"><i class="fas fa-edit"></i></button> <button class="btn danger-btn delete-btn" title="Supprimer"><i class="fas fa-trash"></i></button> </div>`; taskListDiv.appendChild(div); animateCardEntry(div, index * 50); const editBtn = div.querySelector('.edit-btn'); if(editBtn) editBtn.addEventListener('click', () => handleEditTask(taskId)); const deleteBtn = div.querySelector('.delete-btn'); if(deleteBtn) deleteBtn.addEventListener('click', () => handleDeleteTask(taskId)); }); } catch (error) { console.error("Erreur rendu tâches:", error); taskListDiv.innerHTML = '<p class="error-message">Erreur lors du chargement des tâches.</p>'; } };
    const renderDashboard = async () => { /* ... code v29 ... */ };
    const renderStats = async () => { /* ... code v29 ... */ };
    // #endregion

    // #region Event Handlers (CRUD & Autres)
    const handleAddMember = () => { if (!currentUser) { alert('Connectez-vous.'); return; } editingMemberId = null; if (memberForm) memberForm.reset(); if (memberFormTitle) memberFormTitle.textContent = "Ajouter Membre"; if (hiddenMemberIdInput) hiddenMemberIdInput.value = ''; if (memberModal) openModal(memberModal); }; const handleEditMember = async (id) => { if (!currentUser) { alert('Connectez-vous.'); return; } editingMemberId = id; try { const doc = await membersCollection.doc(id).get(); if (doc.exists) { const m = doc.data(); if (memberFormTitle) memberFormTitle.textContent = "Modifier Membre"; if (hiddenMemberIdInput) hiddenMemberIdInput.value = id; ['firstname', 'lastname', 'role', 'contact'].forEach(f => { const el = document.getElementById(`member-${f}`); if (el) el.value = m[f] || ''; }); if (memberModal) openModal(memberModal); } else { alert("Membre introuvable."); editingMemberId = null; } } catch (e) { console.error("Erreur récup membre:", e); alert("Erreur récupération membre."); editingMemberId = null; } }; const handleDeleteMember = async (id) => { if (!currentUser) { alert('Connectez-vous.'); return; } let name = `ID ${id}`, email = null; try { const d=await membersCollection.doc(id).get(); if(d.exists) { name=`${d.data().firstname||''} ${d.data().lastname||''}`.trim()||name; email=d.data().contact; } } catch(e){} if (confirm(`Supprimer ${name} ?\n${email?'Accès autorisé pour '+email+' sera aussi retiré.':''}`)) { try { const batch = db.batch(); batch.delete(membersCollection.doc(id)); if (email) batch.delete(authorizedUsersCollection.doc(email)); await batch.commit(); console.log(`Membre ${id} et accès ${email||'aucun'} supprimés.`); membersLoaded = false; alert(`${name} supprimé.`); ensureCacheAndRender(window.location.hash.substring(1) || 'dashboard'); } catch (e) { console.error("Err suppr membre/accès:", e); alert("Erreur suppression."); } } }; const handleMemberFormSubmit = async (e) => { e.preventDefault(); if (!currentUser) { alert("Connectez-vous."); return; } const firstname = document.getElementById('member-firstname')?.value.trim(); const lastname = document.getElementById('member-lastname')?.value.trim(); const role = document.getElementById('member-role')?.value.trim(); const contactEmail = document.getElementById('member-contact')?.value.trim(); if (!firstname || !lastname) { alert("Prénom et Nom requis."); return; } if (contactEmail && !/\S+@\S+\.\S+/.test(contactEmail)) { alert("Email invalide."); return; } const data = { firstname, lastname, role, contact: contactEmail }; const btn = memberForm?.querySelector('button[type="submit"]'); if (btn) { btn.disabled = true; btn.textContent = '...'; } try { if (editingMemberId) { await membersCollection.doc(editingMemberId).update(data); alert(`Membre mis à jour.`); } else { const docRef = await membersCollection.add(data); console.log("Nouveau membre:", docRef.id); if (contactEmail) { try { await authorizedUsersCollection.doc(contactEmail).set({ addedFromMemberForm: true, memberName: `${firstname} ${lastname}`, addedAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge: true }); alert(`Membre ajouté. Accès autorisé pour ${contactEmail}.`); } catch (authError) { console.error(`Err ajout accès auto ${contactEmail}:`, authError); alert(`Membre ajouté, mais erreur autorisation auto pour ${contactEmail}. Vérifiez manuellement.`); } } else { alert(`Membre ajouté (sans email d'accès).`); } } membersLoaded = false; if (memberModal) closeModal(memberModal); ensureCacheAndRender('members'); } catch (e) { console.error("Err save membre:", e); alert("Erreur enregistrement."); } finally { if (btn) { btn.disabled = false; btn.textContent = 'Enregistrer'; } } };
    const handleAddAnimation = async () => { if (!currentUser) { alert('Connectez-vous.'); return; } editingAnimationId = null; if (animationForm) animationForm.reset(); if (animationFormTitle) animationFormTitle.textContent = "Ajouter Animation"; if (hiddenAnimationIdInput) hiddenAnimationIdInput.value = ''; const statusSelect = document.getElementById('animation-status'); if(statusSelect) statusSelect.value = 'prévue'; await renderMemberCheckboxes(); if (animationModal) openModal(animationModal); }; const handleEditAnimation = async (id) => { if (!currentUser) { alert('Connectez-vous.'); return; } editingAnimationId = id; try { await loadMembersIntoCache(); const doc = await animationsCollection.doc(id).get(); if (doc.exists) { const a = doc.data(); if (animationFormTitle) animationFormTitle.textContent = "Modifier Animation"; if (hiddenAnimationIdInput) hiddenAnimationIdInput.value = id; ['title', 'description', 'location', 'status'].forEach(f => { const el = document.getElementById(`animation-${f}`); if (el) el.value = a[f] || (f === 'status' ? 'prévue' : ''); }); const typeSelect = document.getElementById('animation-type'); if (typeSelect) typeSelect.value = a.animationType || ''; const docsArea = document.getElementById('animation-docs'); if (docsArea) docsArea.value = (a.documentLinks || []).join('\n'); const dateInput = document.getElementById('animation-date'); if (dateInput) { let val = ''; if (a.dateTime?.toDate) { try { const d = a.dateTime.toDate(); val = `${d.getFullYear()}-${(d.getMonth()+1).toString().padStart(2,'0')}-${d.getDate().toString().padStart(2,'0')}T${d.getHours().toString().padStart(2,'0')}:${d.getMinutes().toString().padStart(2,'0')}`; } catch (e) {} } dateInput.value = val; } await renderMemberCheckboxes(a.participantIds || []); if (animationModal) openModal(animationModal); } else { alert("Animation introuvable."); editingAnimationId = null; } } catch (e) { console.error("Err récup anim:", e); alert("Erreur récupération anim."); editingAnimationId = null; } }; const handleDeleteAnimation = async (id) => { if (!currentUser) { alert('Connectez-vous.'); return; } let title = `ID ${id}`; try { const d=await animationsCollection.doc(id).get(); if(d.exists) title=`"${d.data().title||'Sans titre'}"`; } catch(e){} if (confirm(`Supprimer anim ${title} ?\n(Supprime aussi tâches liées!)`)) { try { const tasksSnapshot = await tasksCollection.where("animationId", "==", id).get(); const batch = db.batch(); batch.delete(animationsCollection.doc(id)); tasksSnapshot.forEach(doc => batch.delete(doc.ref)); await batch.commit(); console.log(`Anim ${id} et ${tasksSnapshot.size} tâches supprimées.`); alert(`Anim ${title} et tâches supprimées.`); animationsLoaded = false; tasksLoaded = false; ensureCacheAndRender(window.location.hash.substring(1) || 'dashboard'); } catch (error) { console.error("Err suppr anim/tâches:", error); alert("Erreur suppression."); } } }; const handleAnimationFormSubmit = async (e) => { e.preventDefault(); if (!currentUser) { alert("Connectez-vous."); return; } const title = document.getElementById('animation-title')?.value.trim(); const dateStr = document.getElementById('animation-date')?.value; const type = document.getElementById('animation-type')?.value; const status = document.getElementById('animation-status')?.value || 'prévue'; const description = document.getElementById('animation-description')?.value.trim(); const location = document.getElementById('animation-location')?.value.trim(); const docs = document.getElementById('animation-docs')?.value.split('\n').map(l=>l.trim()).filter(Boolean) || []; const participants = Array.from(animationForm?.querySelectorAll('input[name="participants"]:checked') || []).map(cb => cb.value); if (!title || !dateStr || !type) { alert("Titre, Date/Heure et Type requis."); return; } let timestamp; try { timestamp = firebase.firestore.Timestamp.fromDate(new Date(dateStr)); if (isNaN(timestamp.toDate().getTime())) throw new Error(); } catch (e) { alert("Date/Heure invalide."); return; } const data = { title, dateTime: timestamp, animationType: type, status, description, location, documentLinks: docs, participantIds: participants }; const btn = animationForm?.querySelector('button[type="submit"]'); if (btn) { btn.disabled = true; btn.textContent = '...'; } try { if (editingAnimationId) { await animationsCollection.doc(editingAnimationId).update(data); alert('Animation màj !'); } else { await animationsCollection.add(data); alert('Animation ajoutée !'); } animationsLoaded = false; tasksLoaded = false; if (animationModal) closeModal(animationModal); ensureCacheAndRender(window.location.hash.substring(1) || 'dashboard'); } catch (e) { console.error("Err save anim:", e); alert("Erreur enregistrement."); } finally { if (btn) { btn.disabled = false; btn.textContent = 'Enregistrer'; } } };
    const handleAddTask = async () => { if (!currentUser) { alert('Connectez-vous.'); return; } editingTaskId = null; if (taskForm) taskForm.reset(); if (taskFormTitle) taskFormTitle.textContent = "Ajouter Tâche"; if (hiddenTaskIdInput) hiddenTaskIdInput.value = ''; const statusSelect = document.getElementById('task-status'); if(statusSelect) statusSelect.value = 'à faire'; try { await Promise.all([ loadMembersIntoCache(), loadAnimationsIntoCache() ]); await renderMemberCheckboxesForTask(); populateAnimationOptions(taskAnimationSelect); if (taskModal) openModal(taskModal); } catch(e) { console.error("Err prépa form tâche:", e); alert("Erreur chargement données form."); } }; const handleEditTask = async (id) => { if (!currentUser) { alert('Connectez-vous.'); return; } editingTaskId = id; try { await Promise.all([loadMembersIntoCache(), loadAnimationsIntoCache()]); const doc = await tasksCollection.doc(id).get(); if (doc.exists) { const t = doc.data(); if (taskFormTitle) taskFormTitle.textContent = "Modifier Tâche"; if (hiddenTaskIdInput) hiddenTaskIdInput.value = id; if(document.getElementById('task-description')) document.getElementById('task-description').value = t.description || ''; if(document.getElementById('task-status')) document.getElementById('task-status').value = t.status || 'à faire'; populateAnimationOptions(taskAnimationSelect, t.animationId); const budgetInput = document.getElementById('task-budget'); if (budgetInput) { budgetInput.value = (t.budget != null && !isNaN(t.budget)) ? t.budget : ''; } const dateInput = document.getElementById('task-due-date'); if(dateInput){ let val = ''; if (t.dueDate) { try { const d = t.dueDate.toDate ? t.dueDate.toDate() : new Date(t.dueDate+'T00:00:00'); if(d instanceof Date && !isNaN(d)) val = d.toISOString().split('T')[0]; } catch(e){} } dateInput.value = val; } const assignees = Array.isArray(t.assigneeIds) ? t.assigneeIds : (t.assigneeId ? [t.assigneeId] : []); await renderMemberCheckboxesForTask(assignees); if (taskModal) openModal(taskModal); } else { alert("Tâche introuvable."); editingTaskId = null; } } catch (e) { console.error("Err récup tâche:", e); alert("Erreur récupération tâche."); editingTaskId = null; } }; const handleDeleteTask = async (id) => { if (!currentUser) { alert('Connectez-vous.'); return; } let desc = `ID ${id}`; try { const d=await tasksCollection.doc(id).get(); if(d.exists) desc=`"${d.data().description||'Sans desc.'}"`; } catch(e){} if (confirm(`Supprimer tâche ${desc} ?`)) { try { await tasksCollection.doc(id).delete(); tasksLoaded = false; alert(`Tâche ${desc} supprimée.`); ensureCacheAndRender(window.location.hash.substring(1) || 'dashboard'); } catch (e) { console.error("Err suppr tâche:", e); alert("Erreur suppression."); } } }; const handleTaskFormSubmit = async (e) => { e.preventDefault(); if (!currentUser) { alert("Connectez-vous."); return; } const description = document.getElementById('task-description')?.value.trim(); const animationId = document.getElementById('task-animation')?.value; const status = document.getElementById('task-status')?.value || 'à faire'; const dueDateStr = document.getElementById('task-due-date')?.value; const assigneeIds = Array.from(taskForm?.querySelectorAll('input[name="taskAssignees"]:checked') || []).map(cb => cb.value); const budgetInput = document.getElementById('task-budget'); let taskBudget = null; if (budgetInput?.value.trim() !== '') { const parsedBudget = parseFloat(budgetInput.value.replace(',', '.')); if (!isNaN(parsedBudget) && parsedBudget >= 0) { taskBudget = parsedBudget; } else { alert("Le budget alloué doit être un nombre positif (ou laissé vide)."); return; } } if (!description || !animationId || assigneeIds.length === 0) { alert("Description, Animation liée et Assigné(s) requis."); return; } let dueDate = null; if (dueDateStr) { try { const dateObj = new Date(dueDateStr + 'T00:00:00Z'); if (isNaN(dateObj.getTime())) throw new Error(); dueDate = firebase.firestore.Timestamp.fromDate(dateObj); } catch (e) { alert("Date échéance invalide."); return; } } const data = { description, animationId, assigneeIds, status, dueDate, budget: taskBudget }; const btn = taskForm?.querySelector('button[type="submit"]'); if (btn) { btn.disabled = true; btn.textContent = '...'; } try { if (editingTaskId) { await tasksCollection.doc(editingTaskId).update(data); alert('Tâche màj !'); } else { await tasksCollection.add(data); alert('Tâche ajoutée !'); } tasksLoaded = false; if (taskModal) closeModal(taskModal); ensureCacheAndRender(window.location.hash.substring(1) || 'dashboard'); } catch (e) { console.error("Err save tâche:", e); alert("Erreur enregistrement."); } finally { if (btn) { btn.disabled = false; btn.textContent = 'Enregistrer'; } } };
    const handleShowAnimationTasks = async (animationId, animationTitle) => { if (!currentUser) { alert("Connectez-vous."); return; } if (!taskListModal || !modalTaskTitle || !modalTaskContent) { console.error("DOM Error #task-list-modal"); return; } modalTaskTitle.textContent = `Tâches pour : ${animationTitle || 'Animation'}`; modalTaskContent.innerHTML = '<p>Chargement...</p>'; openModal(taskListModal); try { if (!tasksLoaded || !membersLoaded) { await Promise.all([ loadTasksIntoCache(), loadMembersIntoCache() ]); if (!tasksLoaded || !membersLoaded) throw new Error("Données non chargées."); } const relatedTasks = cachedTasks.filter(t => t.animationId === animationId).sort((a, b) => getDateValueInMillis(a.dueDate) - getDateValueInMillis(b.dueDate)); if (relatedTasks.length === 0) { modalTaskContent.innerHTML = '<p style="text-align:center; color:#888; padding: 20px 0;">Aucune tâche associée.</p>'; return; } let tasksHtml = ''; relatedTasks.forEach(task => { let dateStr = 'N/A', overdueClass = ''; let statusIcon = '<i class="fas fa-circle" title="À faire" style="color: var(--warning-color);"></i>'; try { const dMs = getDateValueInMillis(task.dueDate); if (dMs !== Infinity) { const d = new Date(dMs); dateStr = d.toLocaleDateString('fr-FR', { day: 'numeric', month: 'short', year: 'numeric' }); if (task.status !== 'terminé' && d.getTime() < Date.now() - 864e5) overdueClass = 'text-danger'; } } catch (e) { dateStr = 'Date invalide'; } if (task.status === 'en cours') statusIcon = '<i class="fas fa-spinner fa-spin" title="En cours" style="color: var(--primary-color);"></i>'; else if (task.status === 'terminé') statusIcon = '<i class="fas fa-check-circle" title="Terminé" style="color: var(--success-color);"></i>'; const assignees = (Array.isArray(task.assigneeIds)?task.assigneeIds:[]).map(id => cachedMembers.find(m=>m.id===id)?`${cachedMembers.find(m=>m.id===id).firstname} ${cachedMembers.find(m=>m.id===id).lastname}`:'Inconnu').join(', '); const taskBudgetDisplay = (task.budget != null && !isNaN(task.budget)) ? `${Number(task.budget).toLocaleString('fr-FR')} €` : ''; const budgetDetailHtml = taskBudgetDisplay ? `<div class="task-detail"><i class="fas fa-euro-sign" style="color: var(--warning-color);"></i> <span>Budget: ${taskBudgetDisplay}</span></div>` : ''; tasksHtml += `<div class="modal-task-item"><p class="task-desc">${task.description||'N/A'}</p><div class="task-detail">${statusIcon} <span>Statut : ${task.status||'N/A'}</span></div><div class="task-detail" title="Assigné(s): ${assignees}"><i class="fas fa-users"></i> <span>Assigné(s) : ${assignees||'N/A'}</span></div><div class="task-detail"><i class="fas fa-clock"></i> <span class="${overdueClass}">Échéance : ${dateStr} ${overdueClass?'(Retard!)':''}</span></div>${budgetDetailHtml}</div>`; }); modalTaskContent.innerHTML = tasksHtml; } catch (error) { console.error("Err affichage tâches modale:", error); modalTaskContent.innerHTML = `<p class="error-message">Erreur chargement tâches.<br><small>${error.message}</small></p>`; } };
    const showAnimationDetails = async (animationId) => { if (!currentUser || !animationId) return; if (!animationDetailModal || !animationDetailContent || !detailModalTitle || !editFromDetailBtn) { console.error("DOM Error modale détail"); return; } detailModalTitle.textContent = "Détail Animation"; animationDetailContent.innerHTML = '<p>Chargement...</p>'; openModal(animationDetailModal); currentDetailAnimationId = animationId; try { await Promise.all([ loadAnimationsIntoCache(), loadMembersIntoCache(), loadTasksIntoCache() ]); const animation = cachedAnimations.find(a => a.id === animationId); if (!animation) { animationDetailContent.innerHTML = '<p class="error-message">Animation non trouvée.</p>'; currentDetailAnimationId = null; return; } if (animation.title) detailModalTitle.textContent = `Détail: ${animation.title}`; let dateStr = 'N/D'; if (animation.dateTime?.toDate) { try { dateStr = animation.dateTime.toDate().toLocaleString('fr-FR', { dateStyle: 'full', timeStyle: 'short' }) } catch (e) {} } let participantsList = '<li>Aucun</li>'; if (Array.isArray(animation.participantIds) && animation.participantIds.length > 0) { participantsList = animation.participantIds.map(pId => { const m = cachedMembers.find(m => m.id === pId); return `<li>${m ? m.firstname + ' ' + m.lastname : 'Inconnu'}</li>`; }).join(''); } let documentsList = '<li>Aucun</li>'; if (Array.isArray(animation.documentLinks) && animation.documentLinks.length > 0) { documentsList = animation.documentLinks.map(link => { let txt = link; try { txt = new URL(link).pathname.split('/').pop() || link; } catch (e) {} return `<li><a href="${link}" target="_blank" rel="noopener noreferrer">${txt}</a></li>`; }).join(''); } const descHtml = (animation.description || 'Aucune').replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">").replace(/\n/g, "<br>"); const totalAnimBudget = calculateAnimationBudget(animationId); const budgetDetailDisplay = totalAnimBudget > 0 ? `${totalAnimBudget.toLocaleString('fr-FR')} € (Total tâches)` : 'N/D'; animationDetailContent.innerHTML = `<p><strong><i class="fas fa-calendar-day fa-fw"></i> Date:</strong> ${dateStr}</p><p><strong><i class="fas fa-map-marker-alt fa-fw"></i> Lieu:</strong> ${animation.location||'N/D'}</p><p><strong><i class="fas fa-tags fa-fw"></i> Type:</strong> ${animation.animationType||'N/D'}</p><p><strong><i class="fas fa-info-circle fa-fw"></i> Statut:</strong> ${animation.status||'N/D'}</p><p><strong><i class="fas fa-euro-sign fa-fw"></i> Budget:</strong> ${budgetDetailDisplay}</p><div style="margin-top: 10px;"><strong><i class="fas fa-align-left fa-fw"></i> Description:</strong><div style="margin-left: 24px; margin-top: 5px; white-space: pre-wrap; background-color:#f8f9fa; padding: 8px; border-radius: 4px; max-height: 150px; overflow-y: auto;">${descHtml}</div></div><p style="margin-top: 10px;"><strong><i class="fas fa-users fa-fw"></i> Participants (${(animation.participantIds||[]).length}):</strong></p><ul style="margin-left: 24px;">${participantsList}</ul><p style="margin-top: 10px;"><strong><i class="fas fa-paperclip fa-fw"></i> Documents (${(animation.documentLinks||[]).length}):</strong></p><ul style="margin-left: 24px;">${documentsList}</ul>`; } catch (error) { console.error("Err affichage détails anim:", error); animationDetailContent.innerHTML = '<p class="error-message">Impossible charger détails.</p>'; currentDetailAnimationId = null; } };
    const handleExportCsvStats = () => { if (!currentUser) { alert('Connectez-vous.'); return; } console.log("Début export CSV..."); if (!membersLoaded || !animationsLoaded || !tasksLoaded) { alert("Données non chargées."); return; } try { let csvRows = []; const headers = ['Section', 'Indicateur / Nom', 'Valeur / Détail 1', 'Détail 2', 'Détail 3'].map(escapeCsvValue).join(';'); csvRows.push(headers); csvRows.push(['Indicateurs Clés', escapeCsvValue('Animations Réalisées'), escapeCsvValue(statsTotalCompletedEl?.textContent||'N/A'), '', ''].join(';')); csvRows.push(['', escapeCsvValue('Taux Participation Moyen (%)'), escapeCsvValue(statsAvgParticipationEl?.textContent?.replace('%','').trim()||'N/A'), '', ''].join(';')); csvRows.push(['', escapeCsvValue('Budget Total Engagé (Tâches Anim. Réalisées) (€)'), escapeCsvValue(statsTotalBudgetSpentEl?.textContent?.replace('€','').replace(/\s/g,'').replace(',','.').trim()||'N/A'), '', ''].join(';')); csvRows.push(['', '', '', '', '']); const typeCounts = cachedAnimations.reduce((acc, a)=>{const t=a.animationType||'N/D'; acc[t]=(acc[t]||0)+1; return acc;}, {}); csvRows.push(['Répartition par Type', escapeCsvValue('Type'), escapeCsvValue('Nombre'), '', ''].join(';')); Object.entries(typeCounts).forEach(([t, c])=>csvRows.push(['', escapeCsvValue(t), escapeCsvValue(c), '', ''].join(';'))); if(!Object.keys(typeCounts).length) csvRows.push(['', escapeCsvValue('Aucune donnée'), '', '', ''].join(';')); csvRows.push(['', '', '', '', '']); const statusCounts = cachedAnimations.reduce((acc, a)=>{const s=a.status||'N/A'; acc[s]=(acc[s]||0)+1; return acc;}, {}); csvRows.push(['Répartition par Statut', escapeCsvValue('Statut'), escapeCsvValue('Nombre'), '', ''].join(';')); Object.entries(statusCounts).forEach(([s, c])=>csvRows.push(['', escapeCsvValue(s), escapeCsvValue(c), '', ''].join(';'))); if(!Object.keys(statusCounts).length) csvRows.push(['', escapeCsvValue('Aucune donnée'), '', '', ''].join(';')); csvRows.push(['', '', '', '', '']); const completedAnims = cachedAnimations.filter(a=>a.status==='réalisée'); csvRows.push(['Animations Réalisées', escapeCsvValue('Titre'), escapeCsvValue('Type'), escapeCsvValue('Date'), escapeCsvValue('Nb Parts'), escapeCsvValue('Budget Total Tâches (€)')].join(';')); completedAnims.forEach(a=>{ const d=a.dateTime?.toDate?a.dateTime.toDate().toLocaleDateString('fr-FR'):'N/A'; const pC=(a.participantIds||[]).length; const t=a.animationType||'N/D'; const budgetCalc = calculateAnimationBudget(a.id); csvRows.push(['', escapeCsvValue(a.title), escapeCsvValue(t), escapeCsvValue(d), escapeCsvValue(pC), escapeCsvValue(budgetCalc > 0 ? budgetCalc.toFixed(2).replace('.',',') : '0,00')].join(';')); }); if(!completedAnims.length) csvRows.push(['', escapeCsvValue('Aucune'), '', '', '', ''].join(';')); csvRows.push(['', '', '', '', '']); const tComp=completedAnims.length; const membPart=cachedMembers.map(m=>{let c=0; completedAnims.forEach(a=>{if((a.participantIds||[]).includes(m.id))c++;}); const r=tComp>0?(c/tComp)*100:0; return {n:`${m.firstname} ${m.lastname}`,c,r};}).sort((a,b)=>b.c-a.c); csvRows.push(['Participation Membre (Anim. Réalisées)', escapeCsvValue('Nom'), escapeCsvValue('Nb Parts'), escapeCsvValue('Taux (%)'), ''].join(';')); membPart.forEach(m=>csvRows.push(['', escapeCsvValue(m.n), escapeCsvValue(m.c), escapeCsvValue(m.r.toFixed(1).replace('.',',')), ''].join(';'))); if(!membPart.length) csvRows.push(['', escapeCsvValue('Aucun membre'), '', '', ''].join(';')); const csvString = csvRows.join('\n'); const bom = '\uFEFF'; const blob = new Blob([bom + csvString], {type:'text/csv;charset=utf-8;'}); const link = document.createElement("a"); const url = URL.createObjectURL(blob); link.setAttribute("href", url); const exportDate = new Date().toISOString().split('T')[0]; link.setAttribute("download", `bilan_qvct_${exportDate}.csv`); link.style.visibility='hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url); console.log("Export CSV terminé."); } catch (error) { console.error("Err export CSV:", error); alert("Erreur création CSV."); } };
    // #endregion

    // #region Fonctions Auth
    const signInWithGoogle = async () => { const provider = new firebase.auth.GoogleAuthProvider(); try { console.log("Tentative connexion Google..."); const result = await auth.signInWithPopup(provider); console.log("Connecté avec Google:", result.user.displayName); } catch (error) { console.error("Erreur connexion Google:", error); if (error.code === 'auth/popup-closed-by-user') { alert("Fenêtre connexion fermée."); } else if (error.code === 'auth/cancelled-popup-request') { console.warn("Popups multiples."); } else if (error.code === 'auth/unauthorized-domain') { alert("Domaine non autorisé. Vérifiez config Firebase.");} else { alert(`Erreur connexion: ${error.message}`); } } };
    const signOut = async () => { try { await auth.signOut(); console.log("Utilisateur déconnecté."); } catch (error) { console.error("Erreur déconnexion:", error); alert(`Erreur déconnexion: ${error.message}`); } };
    // #endregion

    // #region Event Listener Attachments
    try { navLinks.forEach(link => { link.addEventListener('click', (e) => { e.preventDefault(); const pageId = link.getAttribute('href')?.substring(1); if (pageId) navigateTo(pageId, true); }); }); window.addEventListener('popstate', () => { const pageId = window.location.hash.substring(1) || 'dashboard'; navigateTo(pageId, false); }); allCloseBtns.forEach(btn => { const modal = btn.closest('.modal'); if (modal) btn.addEventListener('click', () => closeModal(modal)); }); allModals.forEach(modal => { modal.addEventListener('click', (e) => { if (e.target === modal) closeModal(modal); }); }); if (editFromDetailBtn) { editFromDetailBtn.addEventListener('click', () => { if (currentDetailAnimationId) { closeModal(animationDetailModal); handleEditAnimation(currentDetailAnimationId); } else { console.warn("Tentative edit depuis détail sans ID."); } }); } else { console.warn('#edit-from-detail-btn manquant'); } if (addMemberBtn) addMemberBtn.addEventListener('click', handleAddMember); else console.warn("#add-member-btn manquant"); if (addAnimationBtn) addAnimationBtn.addEventListener('click', handleAddAnimation); else console.warn("#add-animation-btn manquant"); if (addTaskBtn) addTaskBtn.addEventListener('click', handleAddTask); else console.warn("#add-task-btn manquant"); if (memberForm) memberForm.addEventListener('submit', handleMemberFormSubmit); else console.warn("#member-form manquant"); if (animationForm) animationForm.addEventListener('submit', handleAnimationFormSubmit); else console.warn("#animation-form manquant"); if (taskForm) taskForm.addEventListener('submit', handleTaskFormSubmit); else console.warn("#task-form manquant"); if (taskFilterAnimationSelect) { taskFilterAnimationSelect.addEventListener('change', renderTasks); } else console.warn("#task-filter-animation manquant"); if (animationStatusFilterSelect) { animationStatusFilterSelect.addEventListener('change', renderAnimations); } else { console.warn("#animation-status-filter manquant."); } if (animationViewFilterSelect) { animationViewFilterSelect.addEventListener('change', renderAnimations); } else { console.warn("#animation-view-filter manquant."); } if (exportCsvBtn) { exportCsvBtn.addEventListener('click', handleExportCsvStats); } else { console.warn("#export-csv-btn manquant."); } if (loginBtn) { loginBtn.addEventListener('click', signInWithGoogle); } else { console.warn("#login-btn manquant"); } if (logoutBtn) { logoutBtn.addEventListener('click', signOut); } else { console.warn("#logout-btn manquant"); } } catch (err) { console.error("Erreur attachement listeners:", err); }
    // #endregion

    // #region Observateur d'Authentification et Initialisation
    console.log("Mise en place de l'observateur d'authentification Firebase...");
    auth.onAuthStateChanged(async user => { const wasConnected = !!currentUser; currentUser = user; if (user) { console.log("Auth state changed: CONNECTÉ", user.uid, user.email); try { console.log(`Vérif autorisation pour: ${user.email}...`); const authorizedUserRef = authorizedUsersCollection.doc(user.email); const docSnap = await authorizedUserRef.get(); if (docSnap.exists) { console.log("Autorisé."); if (userInfoDiv && userNameSpan && userPhotoImg && loginBtn && logoutBtn) { userNameSpan.textContent = user.displayName || user.email || 'Utilisateur'; userPhotoImg.src = user.photoURL || 'img/placeholder.png'; userPhotoImg.alt = user.displayName || 'Avatar'; userInfoDiv.style.display = 'flex'; loginBtn.style.display = 'none'; logoutBtn.style.display = 'inline-flex'; } if (!isInitialLoadComplete || !wasConnected) { console.log("Chargement initial requis..."); try { await loadAllCaches(true); if (isInitialLoadComplete && typeof resolveInitialLoad === 'function') { console.log("Chargement OK, résolution Promise."); resolveInitialLoad(); resolveInitialLoad = null; } else if (!isInitialLoadComplete) { console.error("ERREUR: loadAllCaches OK mais flag NOK!"); } } catch (loadError) { console.error("Erreur critique loadAllCaches:", loadError); document.body.innerHTML = '<h1 style="color:red; text-align:center; margin-top: 50px;">Erreur chargement données initiales. Rechargez.</h1>'; if(auth) await auth.signOut().catch(e => console.error("Err déco forcée:", e)); return; } } else { console.log("Déjà connecté et chargé."); if (typeof resolveInitialLoad === 'function') { console.log("Résolution Promise (redondant)."); resolveInitialLoad(); resolveInitialLoad = null; } } const currentPageId = window.location.hash.substring(1) || 'dashboard'; console.log(`Navigation initiale/post-connexion vers: ${currentPageId}`); navigateTo(currentPageId, !wasConnected); } else { console.warn(`Utilisateur ${user.email} NON AUTORISÉ.`); alert(`Accès refusé pour ${user.email}. Contactez l'admin.`); await auth.signOut(); } } catch (error) { console.error("Erreur vérif autorisation:", error); alert("Erreur vérification droits. Déconnexion."); await auth.signOut(); } } else { console.log("Auth state changed: DÉCONNECTÉ"); currentUser = null; if (userInfoDiv && loginBtn && logoutBtn) { userInfoDiv.style.display = 'none'; loginBtn.style.display = 'block'; logoutBtn.style.display = 'none'; } clearAllCaches(); resetInitialLoadPromise(); console.log("Nettoyage vues/caches déco..."); pages.forEach(p => { if (p.id !== 'dashboard') { p.innerHTML = '<p style="text-align:center; margin-top: 30px; color: var(--danger-color);">Veuillez vous connecter.</p>'; }}); if(statsTotalCompletedEl) statsTotalCompletedEl.textContent = '-'; if(statsAvgParticipationEl) statsAvgParticipationEl.textContent = '-'; if(statsTotalBudgetSpentEl) statsTotalBudgetSpentEl.textContent = '-'; if (statusChartInstance) { statusChartInstance.destroy(); statusChartInstance = null; } if (typeChartInstance) { typeChartInstance.destroy(); typeChartInstance = null; } if (participationChartInstance) { participationChartInstance.destroy(); participationChartInstance = null; } if(statusErrorEl) statusErrorEl.style.display = 'none'; if(typeErrorEl) typeErrorEl.style.display = 'none'; if(participationErrorEl) participationErrorEl.style.display = 'none'; navigateTo('dashboard', false); } });
    // #endregion

    // --- Fin DOMContentLoaded ---
});
